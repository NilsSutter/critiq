<% content_for :title, "- Create" %>
<%= render partial: "shared/sidebar" %>
<div class="main-content">
  <!-- HEADER -->
  <div class="header no-b-margin">
    <div class="container-fluid">

      <!-- Body -->
      <div class="header-body">
        <div class="row align-items-end">
          <div class="col-8">

            <!-- Pretitle -->
            <h6 class="header-pretitle">
              CRITIQ
            </h6>

            <!-- Title -->
            <h1 class="header-title">
              Create
            </h1>

          </div>
          <div class="col-4">

            <!-- Button -->


          </div>
        </div>
        <!-- / .row -->
      </div>
      <!-- / .header-body -->

    </div>
  </div>
  <!-- / .header -->

  <!-- LEFT and RIGHT panes -->
  <div class="container-fluid d-flex overflow-a" style="max-width:900px;">
    <div class="all-questions no-scrollbar">
      <div class="title_and_description mb-3">
        <div class="header-section-survey">
          <div class="header-title-survey">
            <h1 style="margin-top:20px;"><%= @survey.title %></h1>
            <p style="margin-top:20px;"><%= @survey.created_at.strftime("%e %B %Y")%></p>
          </div>
        </div>
        <div class="description-and-button">
          <h3><%= @survey.description %></h3>
          <p class="btn btn-light display-header-button" style="max-height:26px !important;">Edit Title</p>
        </div>
      </div>
      <%= simple_form_for @survey do |f| %>
      <div class="wrapper-titel-survey-header">
          <div class="wrapper-title-survey">
            <%= f.input :title,
                        wrapper_html: { class: 'title-input-text' }%>
            <%= f.input :description,
                        wrapper_html: { class: 'description-input-text' } %>
        </div>
        <div class="slack-channels">
          <div class="w-50">
            <h4 style="padding-top:10px;">Get Critiq from your colleagues in:</h4>
          </div>
          <div class="w-50">

            <%= f.collection_select :channel_id,
                  @slackchannels,
                  ->(item) { item[:id] },
                  ->(item) { item[:name].capitalize }
                  %>

                  <p class="text-left my-4 text-muted">A message will be sent to <strong>each member</strong> of the group <strong>individually</strong>.</p>
          </div>
        </div>
      </div>
        <!-- nested form for creating questions -->
        <div id="questions">
          <%= f.simple_fields_for :questions do |f| %>
            <%= render 'question_fields', f: f %>
          <% end %>

            <div class="links">
               <%= link_to_add_association '<i class="fas fa-plus-circle"></i>'.html_safe, f, :questions, class:"question-icon plusButtonMover" %>
            </div>

        </div>
        <%= f.input :published, :as => :hidden, :input_html => { :value => "true" } %>

        <div class="form-create-footer text-right px-5 mb-5">
          <span class="text-left">
          </span>
          <span class="text-right">
            <%= f.submit "Save", class:"btn btn-primary create-survey-button-edit send-button-mover btn-ease", disabled: true %>
            <%= f.submit "Send & Save", class:"btn btn-start-crit create-survey-button-edit sendAndSavebtn btn-ease", disabled: true %>
          </span>
        </div>
      <% end %>
    </div>
  </div>
</div>

<!-- END  -->
<%= content_for :after_js do %>
  <script>
    // Simulates a 'click' on the add question button
    // on page load so there is a first question
    const clickPlus = () => {
      document.querySelector('.question-icon').click()
    };

    // Disables the save/send buttons if the value of the first question input is empty
    const disableButtons = () => {
      const buttonSave = document.querySelectorAll('.create-survey-button-edit')[0];
      const buttonSend = document.querySelectorAll('.create-survey-button-edit')[1];
      const inputField = document.querySelectorAll('input[id*=survey_questions]')[0];


      if (buttonSave && buttonSend && inputField) {
        // Check for edit page
        if (inputField.value.length > 0) {
          buttonSave.disabled = false;
          buttonSend.disabled = false;
        }
        // Event Listener for Create path
        inputField.addEventListener('keyup', (event) => {
          if (inputField.value.length > 0) {
            buttonSave.disabled = false;
            buttonSend.disabled = false;
          } else {
            buttonSave.disabled = true;
            buttonSend.disabled = true;
          }
        });
      }
    };

    $( document ).ready(function(){
      clickPlus();
      disableButtons();
    })

    // NEEDS to be jQuery to work with Cocoon. Bleh.
    $('#questions').on('cocoon:after-insert', function(e, insertedItem) {
      // Just a filter so it's the right object to act on
      if (insertedItem.length === 5 && insertedItem[4].id === "choices") {
        let addedDropdown = insertedItem[2].lastElementChild.children["0"].children[1]
        let associatedChoiceBtn = insertedItem[4].lastElementChild
        let n = document.querySelectorAll('.select.optional.form-control').length
        // add unique class to the first item so it can be used in the delete callback
        // to find the second item
        insertedItem[4].classList.add(`mc-choices-${n}`);
        insertedItem[2].classList.add(`mc-choices-${n}`);

        // Remove Minus button from first question so it cannot be removed
        if (insertedItem[2].classList[1] === "mc-choices-1"){
          insertedItem[2].children["0"].children[3].remove();
        }

        // Add event listener to each dropdown to toggle "add choice" button
        addedDropdown.addEventListener('change', function(event) {
          if (this.value === "radio"){
            // Add classes for Spacing
            associatedChoiceBtn.classList.remove("mc-hidden");
            insertedItem[4].classList.add("mc-choice-bump-height");
          } else {

            // Remove Choices if the question goes back to "open Text"
            let list = insertedItem[4].children;
            for (let item of list) {
              if (item.classList[0] === "nested-fields"){
                item.classList.add('KillMeNow');
              }
            }
            document.querySelectorAll('.KillMeNow').forEach(function(item) {
              item.remove();
            })
            // Remove classes associated with Spacing
            associatedChoiceBtn.classList.add("mc-hidden");
            insertedItem[4].classList.remove("mc-choice-bump-height");
          };
        })
      }
    });
    $('#questions').on('cocoon:after-remove', function(e, insertedItem) {
      // find the so-classed div and remove it.
      if (insertedItem["0"].classList[1]) {
        let kill = `.${insertedItem["0"].classList[1]}`
        document.querySelector(kill).remove();
      }
    });
  </script>
<% end %>
